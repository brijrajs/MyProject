## TODO: JY - Move Styling into appropriate core/theme stylesheet.

<style>
  #mapDisplay {
    height: 65vh;
  }

  @media only screen and (max-width: 40em) { 
    #mapDisplay {
      height: 50vh;
    }
  }
      
  #instructions {
    height: 50%;
  }
      
  .adp-placemark {
    display: none;
  }

  .find-inputs input,
  .find-inputs select {
    width: auto;
    display: inline-block;
  }

  .locationList li {
    cursor: pointer; 
  }
     
</style>

## Handlebars templates used in rendering the dynamic content as the locator is interacted with.  
## The Handlebars if statements are escaped so that Velocity doesn't complain about them.

<script type="text/template" id="location-info-template">
  <strong>{{name}}</strong><br/>
  {{address1}}<br/>
  {{\#if address2}}
    {{address2}}
  {{/if}}
  {{city}}, {{state}} {{postalCode}}, {{country}}<br/><br/>

  {{\#if phone}}
  Phone: <a href="tel:{{phone}}">{{phone}}</a><br/>
  {{/if}}
  {{\#if fax}}
  Fax: {{fax}}<br/>
  {{/if}}
  {{\#if email}}
  Email: <a href="mailto:{{email}}">{{email}}</a><br/>
  {{/if}}
  {{\#if tags}}
  <ul>
  {{#each tags}}
  <li>{{this}}</li>
  {{/each}}
  </ul>
  {{/if}}
  <a class='locationGetDirections' data-location-oid='{{locationOid}}'>Get Directions</a>
  <span class="hide-for-medium-up">&nbsp;|&nbsp;</span>
  <a href="http://maps.google.com/maps?ll={{latitude}},{{longitude}}" class="hide-for-medium-up">Navigate</a>
</script>
<script type="text/template" id="find-tags-template">
  {{#each tags}}
     <input type="checkbox" class="findTag" value="{{this}}">{{this}}
  {{/each}}
</script>
<script type="text/template" id="location-list-template">
  {{\#if locations}}
    <ul class='locationList'>

    {{#each locations}}
        <li data-location-oid='{{locationOid}}'>
            {{name}} - {{distanceText}} - {{durationText}}<br/>
            <a class='locationGetDirections' data-location-oid='{{locationOid}}'>Get Directions</a>                
        </li>
    {{/each}}

    </ul>
  {{else}}
    Sorry, no locations were found within the area you searched.  Please adjust your search above.
  {{/if}}
</script>

## Figure out the Google Maps Key
#set($googleMapsApiKey = false)   
#if ($site.attr("googleMapsApiKey"))
  #set($googleMapsApiKey = $site.attr("googleMapsApiKey"))
#elseif ($catalogHostName.endsWith(".ultracartstore.com") || $catalogHostName.endsWith(".ultracartdev.com"))
  ## Testing key that will only work on .ultracartstore.com or .ultracartdev.com StoreFronts.  You must signup for your own key.
  #set($googleMapsApiKey = "AIzaSyB_wtNoHIKgYiswPvGlVyRLODLhZ8I_dAI")      
#end

#if ($googleMapsApiKey)

<div class="row">
  <div class="columns small-16 find-inputs">
    Find stores near: <input type="text" size="20" id="findQuery">
    Distance 
    <select id="findDistance">
      <option value="25">25 miles</option>
      <option value="50">50 miles</option>
      <option value="100">100 miles</option>
      <option value="-1" selected>No Limit</option>
    </select>
    Results 
    <select id="findResultCount">
      <option value="25">25</option>
      <option value="50">50</option>
      <option value="100">100</option>
    </select>
    <input type="button" id="find" value="search">
  </div>
</div>
<div class="row">
  <div class="columns small-16" id="findTagsContainer">
  </div>
</div>
<div class="row">
  <div class="columns small-16 medium-10 medium-push-6">
    <div id="mapDisplay"></div>
  </div>
  <div class="columns small-16 medium-6 medium-pull-10">
    <div id="locationListContainer"></div>
    <div id="instructionsContainer" style="display: none;">
      <a id="returnToResults">&lt;&lt; Return to results</a>
      <div id="instructionDestinationAddress"></div>
      <div id="instructions">
      </div>
    </div>
  </div>
</div>

<script src="/js/handlebars-v3.0.3.js"></script>

## TODO - JY - Decide if this JS code needs to move into a separate JS file and then just include.
<script>
  // Global variables
  var map;
  var directionsDisplay;
  var geocoder;
  var distanceMatrixService;
  var infoWindow;

  var locations = [];
  var originationLatLng = {lat: 33.808699841648284, lng: -84.09440073068845};	// TODO: Set this to the initial values that we retrieve from our geolocation
  var originationMarker;
  var locationMarkers = [];
  var activeLocationMarker;
  var directionMode = false;

  // Compiled templates
  var locationListTemplate;
  var locationInfoTemplate;
  var findTagsTemplate;

  jQuery(document).ready(function(){
    // Compile templates real quick.
    findTagsTemplate = Handlebars.compile(jQuery("#find-tags-template").html());
    locationInfoTemplate = Handlebars.compile(jQuery("#location-info-template").html());
    locationListTemplate = Handlebars.compile(jQuery("#location-list-template").html());

    jQuery("#findQuery").click(function () {
        jQuery(this).select();
    });

    // Bind on the find button
    jQuery("#find").click(function(){
      updateOriginationLocation(jQuery("#findQuery").val());
    });        

    // Delegate bind on the location list div to listen for clicks
    jQuery("#locationListContainer").on("click", ".locationList li", function(){
      var locationOid = parseInt(jQuery(this).data("location-oid"));
      selectLocationByOid(locationOid);
    });

    // Handle clicks on the get direction links
    jQuery("body").on("click", ".locationGetDirections", function(event){
      event.preventDefault();
      event.stopPropagation();

      var locationOid = parseInt(jQuery(this).data("location-oid"));

      for (var i = 0; i < locations.length; i++) {
        var location = locations[i];

        if (location.locationOid == locationOid) {
          activeLocationMarker = location.marker;
          enableDirectionMode();
          console.log("get directions clicked");
          break;
        }
      }

    });

    // Enter on the query window will trigger a search
    jQuery("#findQuery").keyup(function(event){
        if(event.keyCode == 13){
            jQuery("#find").click();
        }
    });

    // Setup click handle for return to results
    jQuery("#returnToResults").on("click", function(event){
      event.preventDefault();
      event.stopPropagation();
      disableDirectionMode();
    });

    // Bounce the buttons when they hover over the location
    jQuery("#locationListContainer").on("mouseenter", ".locationList li", function(){
      var locationOid = parseInt(jQuery(this).data("location-oid"));
      animateLocation(locationOid);
    });

    // Stop bouncing the buttons when they leave the location
    jQuery("#locationListContainer").on("mouseleave", ".locationList li", function(){
      var locationOid = parseInt(jQuery(this).data("location-oid"));
      stopAnimateLocation(locationOid);
    });

  });

  function updateOriginationLocation(s) {
    geocoder.geocode( { 'address': s}, function(results, status) {

      if (status == google.maps.GeocoderStatus.OK) {
        originationLatLng = {
          lat: results[0].geometry.location.lat(),
          lng: results[0].geometry.location.lng()
        };

        originationMarker.setPosition(originationLatLng);

        // Now fetch the new locations
        fetchLocations();
      } else {
        alert("Unable to determine the location of the address you entered.");
      }
    });

  }

  function animateLocation(locationOid) {
    for (var i = 0; i < locations.length; i++) {
      var location = locations[i];

      if (location.locationOid == locationOid) {
        // Bounce the marker
        if (location.marker) {
          location.marker.setAnimation(google.maps.Animation.BOUNCE);
        }
        break;
      }
    }
  }

  function stopAnimateLocation(locationOid) {
    for (var i = 0; i < locations.length; i++) {
      var location = locations[i];

      if (location.locationOid == locationOid) {
        // Stop bouncing the marker
        if (location.marker) {
          location.marker.setAnimation(null);
        }
        break;
      }
    }
  }

  function selectLocationByOid(locationOid) {
    for (var i = 0; i < locations.length; i++) {
      var location = locations[i];

      if (location.locationOid == locationOid) {
        // Adjust the active marker on the map and redraw the directions.            
        activeLocationMarker = location.marker; 

        google.maps.event.trigger(activeLocationMarker, 'click');

        displayDirections(activeLocationMarker);
        break;
      }
    }
  }

  function fetchLocations() {
    console.log("fetchLocations");
    // TODO: Build up a REST call

    var fetchLocationsRequest = {};

    fetchLocationsRequest.latitude = originationLatLng.lat;
    fetchLocationsRequest.longitude = originationLatLng.lng;
    fetchLocationsRequest.query = jQuery("#findQuery").val();
    fetchLocationsRequest.distance = parseInt(jQuery("#findDistance").val());
    fetchLocationsRequest.resultCount = parseInt(jQuery("#findResultCount").val());
    fetchLocationsRequest.selectedTags = [];
    jQuery(".findTag").filter(":checked").each(function(){
      fetchLocationsRequest.selectedTags.push(jQuery(this).val());
    });
    console.log("fetchLocationsRequest", fetchLocationsRequest);

    // TODO: Submit a JSON object instead of individual parameters.

    // Perform the AJAX call
    jQuery.ajax(
    {
      url: "/rest/site/storeFront/locations",
      data: JSON.stringify(fetchLocationsRequest),
      async: true,
      type: 'POST',
      contentType: 'application/json; charset=UTF-8',
      dataType: "json"
    }
    ).done(function (result) {
      var _locations = result.locations;

      // Assign OIDs to them
      for (var i = 0; i < _locations.length; i++) {
        _locations[i].locationOid = i + 1;
      }

      locations = _locations;

      updateTags(result.tags, result.selectedTags);        
      disableDirectionMode();
      displayLocationsOnMap();
      calculationLocationDistances();
    });

  }

  function updateTags(allTags, selectedTags) {
    var that = this;

    var context = {tags: allTags};

    jQuery("#findTagsContainer").html(findTagsTemplate(context));

    // Reselect checkboxes
    for (var i = 0; i < selectedTags.length; i++) {
      jQuery(".findTag").filter(function(){
         return jQuery(this).attr('value') == selectedTags[i];
      }).prop("checked","true");
    }

    // Attach a handler to all the checkboxes to fire the query if they change it
    jQuery(".findTag").on("change", function(){
      that.fetchLocations();
    });
  }

  function setupMap() {
    console.log("setupMap called");
    if (!map) {

      // Create the map object starting at where they are located based upon IP.
      map = new google.maps.Map(document.getElementById('mapDisplay'), {
        zoom: 12, // TODO: Determine what to set this at.
        center: originationLatLng,
        panControl: true
      });

      // Setup teh direction display rendered
      directionsDisplay = new google.maps.DirectionsRenderer({
        //suppressMarkers: true,
        //preserveViewport: true
       });

      // Attach it to the map and the instructions div on the page.
      directionsDisplay.setMap(map);
      directionsDisplay.setPanel(document.getElementById('instructions'));

      // Setup the geocoder object
      geocoder = new google.maps.Geocoder();          

      // Setup the distance calculation service
      distanceMatrixService = new google.maps.DistanceMatrixService();

      // Info window setup
      infoWindow = new google.maps.InfoWindow();

      // Try to determine their current location and populate the find box.
      askBrowserForLocation();
    } else {
      console.log("Map already initialized", map);
    }
  }

  function askBrowserForLocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        originationLatLng = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };

        // Find the ZIP code for their current location
        geocoder.geocode({'location': originationLatLng}, function(results, status) {
          if (status === google.maps.GeocoderStatus.OK) {

            if (results[1]) {
              var components={};
              jQuery.each(results[1].address_components, function(k,v1) {jQuery.each(v1.types, function(k2, v2){components[v2]=v1.long_name});});            

              console.log("components", components);

              // alert("Your postal code is" +  components.postal_code);
              if (components.political == "United States" && components.postal_code) {
                jQuery("#findQuery").val(components.postal_code);
              } else if (components.locality && components.political) {
                jQuery("#findQuery").val(components.locality + ", " + components.political);
              }
            }
          }
        });

        // Since we have an origin location we can fetch the locations
        fetchLocations();

      }, function() {
        //handleLocationError(true, infoWindow, map.getCenter());
      });
    }
  }

  function enableDirectionMode() {
    directionMode = true;
    displayDirections(activeLocationMarker);
    jQuery("#locationListContainer").slideUp(200, function(){
      jQuery("#instructionsContainer").slideDown(200);
    });
  }

  function disableDirectionMode() {
    directionMode = false;
    displayDirections(activeLocationMarker);
    //jQuery("#instructionsContainer").hide();
    //jQuery("#locationListContainer").show();
    jQuery("#instructionsContainer").slideUp(200, function(){
      jQuery("#locationListContainer").slideDown(200);
    });
    zoomToAllMarkers();        
  }

  function displayDirections(destinationMarker) {
    if (destinationMarker && directionMode) {
      console.log("destinationMarker", destinationMarker.getPosition().lat(), destinationMarker.getPosition().lng());

      // Clear the map on all of the markers
      if (originationMarker) {
        originationMarker.setMap(null);
      }
      for (var i = 0; i < locationMarkers.length; i++) {
        locationMarkers[i].setMap(null);
      }

      var request = {
          origin : originationMarker.getPosition(),
          destination : destinationMarker.getPosition(),
          travelMode : google.maps.TravelMode.DRIVING
      };
      var directionsService = new google.maps.DirectionsService(); 
      directionsService.route(request, function(response, status) {
          if (status == google.maps.DirectionsStatus.OK) {
              directionsDisplay.setDirections(response);

            activeLocationMarker = destinationMarker;
          }
      });

      // TODO: Use handlebars template for this.
      jQuery("#instructionDestinationAddress").html(destinationMarker.location.name);

    } else {
      // Clear the directions
      directionsDisplay.set('directions', null);

      // Clear the map on all of the markers
      if (originationMarker) {
        originationMarker.setMap(map);
      }
      for (var i = 0; i < locationMarkers.length; i++) {
        locationMarkers[i].setMap(map);
      }
    }
  }

  function displayLocationsOnMap() {        
    console.log("displayLocationsOnMap");
    // Clear the map on all existing markers
    if (originationMarker) {
      originationMarker.setMap(null);
    }
    for (var i = 0; i < locationMarkers.length; i++) {
      locationMarkers[i].setMap(null);
    }


    // Add the origin marker
    var pinColor = "FFFF57";
    var pinImage = new google.maps.MarkerImage("https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + pinColor,
        new google.maps.Size(21, 34),
        new google.maps.Point(0,0),
        new google.maps.Point(10, 34));
    var pinShadow = new google.maps.MarkerImage("http://chart.googleapis.com/chart?chst=d_map_pin_shadow",
        new google.maps.Size(40, 37),
        new google.maps.Point(0, 0),
        new google.maps.Point(12, 35));

    originationMarker = new google.maps.Marker({
        position: originationLatLng,
        map: map,
        draggable: true,
        title: 'You are here',
        icon: pinImage,
        shadow: pinShadow,
        animation: google.maps.Animation.DROP
    });

    // Attach a handler to the origination marker so if they drag it we update the location
    google.maps.event.addListener(originationMarker, 'dragend', function() { 
      // Update our origination location
      originationLatLng = {
        lat: originationMarker.getPosition().lat(),
        lng: originationMarker.getPosition().lng()
      };

      // Update the display directions
      displayDirections(activeLocationMarker);

      // Adjust the zoom so it's as tight as possible after the drag.
      zoomToAllMarkers();

      calculationLocationDistances();
    });

    locationMarkers = [];
    for (i = 0; i < locations.length; i++) {
      var location = locations[i];

      var locationMarker = new google.maps.Marker({
        position: {lat: location.latitude, lng: location.longitude},
        map: map,
        draggable: false,
        animation: google.maps.Animation.DROP
      });


      // Bind a click handler for each location
      locationMarker.addListener('click', createLocationClickHandler(location));

      // Store the marker on the location object because we're going to be sorting them by distance.
      location.marker = locationMarker;
      // Store the location on the marker object so we have access to it later.
      locationMarker.location = location;

      locationMarkers.push(locationMarker);          
    }

    // Clear the active location marker
    activeLocationMarker = null;

    // Zoom so that all the markers are visible
    zoomToAllMarkers();        
  }

  function zoomToAllMarkers() {
    // Now form a bounding box around the markers and zoom to that.
    if (locations.length > 0) {
      var latlngbounds = new google.maps.LatLngBounds();
      latlngbounds.extend(new google.maps.LatLng(originationLatLng.lat, originationLatLng.lng));
      for (i = 0; i < locations.length; i++) {
        var location = locations[i];
        latlngbounds.extend(new google.maps.LatLng(location.latitude, location.longitude));
      }        

      map.setCenter(latlngbounds.getCenter());
      map.fitBounds(latlngbounds)
    } else {
      // No locations
      map.setCenter(originationLatLng);
      map.setZoom(8);
    }
  }

  function calculationLocationDistances() {
    // #locationList

    // Build an array of the destination lat/lng
    var destinations = [];
    for (i = 0; i < locations.length; i++) {
      var location = locations[i];
      destinations.push(new google.maps.LatLng(location.latitude, location.longitude));
    }        

    // Ask for the distances between the locations.
    distanceMatrixService.getDistanceMatrix(
      {
        origins: [originationLatLng],
        destinations: destinations,
        travelMode: google.maps.TravelMode.DRIVING,
        unitSystem: google.maps.UnitSystem.IMPERIAL,
        durationInTraffic: true,
        avoidHighways: false,
        avoidTolls: false,
      }, function distanceMatrixCallback(response, status) {
        console.log("distanceMatrixCallback", response, status);

        if (status == google.maps.DistanceMatrixStatus.OK) {
          var origins = response.originAddresses;
          var destinations = response.destinationAddresses;

          for (var i = 0; i < origins.length; i++) {
            var results = response.rows[i].elements;
            for (var j = 0; j < results.length; j++) {
              var element = results[j];
              var distance = element.distance.text;
              var duration = element.duration.text;
              var from = origins[i];
              var to = destinations[j];

              console.log("Destination", to, "distance", distance, "duration", duration);

              // Update our location information
              locations[j].distanceText = element.distance.text;
              locations[j].distanceValue = element.distance.value;
              locations[j].durationText = element.duration.text;
              locations[j].durationValue = element.duration.value;
            }
          }
        }

        sortLocationList();
        displayLocationList();

      });        
  }

  function sortLocationList() {
    locations.sort(function(locA, locB) {
      if (locA.durationValue && locB.durationValue) {
        return locA.durationValue - locB.durationValue;
      } else {
        return 0;
      }
    });
  }

  function displayLocationList() {
    jQuery("#locationListContainer").html(locationListTemplate({"locations": locations}));
  }

  function createLocationClickHandler(location) {
    return function(){
      console.log("Click on location", location);
      infoWindow.close();
      infoWindow.setContent(locationInfoTemplate(location));
      infoWindow.open(map, location.marker);
      displayDirections(location.marker);
    };
  }
  
</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=$googleMapsApiKey&callback=setupMap"></script>
#else 
  Sorry, the Store Locator feature is not available on your StoreFront until you configure your Google Maps API Key under StoreFront -> Store Locator -> Settings.
#end
